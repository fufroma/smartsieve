<?php
/*
 * $Id$
 *
 * Copyright (C) 2002-2007 Stephen Grier <stephengrier@users.sourceforge.net>
 *
 * See the inclosed NOTICE file for conditions of use and distribution.
 */


/**
 * Class SmartSieve contains the generic SmartSieve functions 
 * used throughout the application.
 *
 * @author Stephen Grier <stephengrier@users.sourceforge.net>
 * @version $Revision$
 */
class SmartSieve {

   /**
    * Check the authentication state of this session. If a session exists 
    * try to authenticate. If not, check for submitted login credentials, set 
    * a session and try to authenticate. If all else fails, redirect to the 
    * login page.
    *
    * @return void Sends a 302 redirect on failure
    */
    function checkAuthentication()
    {
        if (isset($_SESSION['smartsieve']) && is_array($_SESSION['smartsieve'])) {
            if (SmartSieve::authenticate() !== true) {
                SmartSieve::destroy();
                header('Location: ' . SmartSieve::setUrl('login.php'));
                exit;
            }
        } elseif (($details = SmartSieve::getLoginDetails()) !== false) {
            $ret = SmartSieve::login($details);
            if ($ret !== true) {
                header('Location: ' . SmartSieve::setUrl('login.php?reason=failure'));
                exit;
            }
        } else {
            // No existing session or login attempt. Redirect to login page.
            header('Location: ' . SmartSieve::setUrl('login.php'));
            exit;
        }
    }

   /**
    * Get the login details from the login page, or some other source.
    *
    * @return mixed array of login details on success, boolean false if not
    */
    function getLoginDetails()
    {
        $details = array();
        /* If user has submitted login page, get details from POST request. */
        if (isset($_POST['auth']) && isset($_POST['passwd'])) {
            $details['auth'] = SmartSieve::getFormValue('auth');
            $details['passwd'] = SmartSieve::getFormValue('passwd');
            $details['authz'] = SmartSieve::getFormValue('authz');
            $details['server'] = SmartSieve::getFormValue('server');
        }
        /* Try an alternative source. */
        elseif (($func = SmartSieve::getConf('get_login_details_hook')) !== null &&
             function_exists($func)) {
            $details = call_user_func($func);
        }
        return (!empty($details) && is_array($details)) ? $details : false;
    }

   /**
    * Handle a login event. Set session environment and authenticate.
    *
    * @param array $credentials Login credentials as returned by ::getLoginDetails()
    * @return boolean true on success, false if not
    */
    function login($credentials)
    {
        if (empty($credentials) || !is_array($credentials)) {
            return false;
        }
        // Make sure we have a clean session.
        SmartSieve::destroy();
        session_start();

        if (($ret = SmartSieve::setSession($credentials)) === true &&
            ($ret = SmartSieve::authenticate()) === true) {

            $smartsieve = &$_SESSION['smartsieve'];

            SmartSieve::log(sprintf('login: %s%s [%s] {%s:%s}',
                ($smartsieve['auth'] != $smartsieve['authz']) ? sprintf('%s as ', $smartsieve['auth']) : '',
                $smartsieve['authz'], $_SERVER['REMOTE_ADDR'], $smartsieve['server']['host'],
                $smartsieve['server']['sieveport']), LOG_INFO);
            // Set the array of script objects in the PHP session.
            $_SESSION['scripts'] = array();
            // Set which script to edit first.
            SmartSieve::setWorkingScript(SmartSieve::getFormValue('scriptfile'));
            if (isset($_POST['lang'])) {
                $_SESSION['smartsieve_lang'] = SmartSieve::getFormValue('lang');
            }
            return true;
        }
        SmartSieve::log(sprintf('FAILED LOGIN: %s%s [%s] {%s}: %s',
            $credentials['auth'],
            (!empty($credentials['authz']) && $credentials['authz'] != $credentials['auth']) ?
                sprintf(' as %s', $credentials['authz']) : '',
            $_SERVER['REMOTE_ADDR'], $credentials['server'], $ret), LOG_ERR);

        SmartSieve::destroy();
        session_start();
        return false;
    }

   /**
    * Destroy the current PHP session.
    *
    * @return void
    */
    function destroy()
    {
        if (isset($_SESSION['smartsieve'])) {
            $_SESSION['smartsieve'] = null;
            unset($_SESSION['smartsieve']);
        }
        if (isset($_SESSION['scripts'])) {
            $_SESSION['scripts'] = null;
            unset($_SESSION['scripts']);
        }
        @session_destroy();
    }

   /**
    * Handle a logout event.
    *
    * @return void Possibly a 302 redirect
    */
    function logout()
    {
        if (isset($_SESSION['smartsieve']) && is_array($_SESSION['smartsieve'])) {
            SmartSieve::log(sprintf('logout: %s',
                $_SESSION['smartsieve']['authz']), LOG_INFO);
            SmartSieve::close();
            SmartSieve::destroy();
            if (($uri = SmartSieve::getConf('logout_redirect')) !== null) {
                header(sprintf('Location: %s', $uri));
                exit;
            }
            session_start();
        }
    }

   /**
    * Set up the SmartSieve session. This should only be called when 
    * a user logs in.
    *
    * @param array $credentials array(string $auth,
    *                                 string $authz,
    *                                 string $passwd,
    *                                 string $server)
    * @return mixed boolean true on success, string error if not
    */
    function setSession($credentials)
    {
        global $servers;
        if (empty($credentials['auth'])) {
            return 'setSession: no auth name supplied';
        } if (empty($credentials['passwd'])) {
            return 'setSession: no password supplied';
        }

        $smartsieve = array();

        include_once SmartSieve::getConf('config_dir') . '/servers.php';

        // Server value must exist in servers.php.
        if (!array_key_exists($credentials['server'], $servers) ||
            !is_array($servers[$credentials['server']])) {
            $srvkeys = array_keys($servers);
            $credentials['server'] = (!empty($srvkeys)) ? $srvkeys[0] : '';
        }
        $server = array();
        $server['host'] = SmartSieve::getServerValue($credentials['server'], 'server');
        $server['sieveport'] = SmartSieve::getServerValue($credentials['server'], 'sieveport', '2000');
        $server['display'] = SmartSieve::getServerValue($credentials['server'], 'display', $server['host']);
        $server['imapport'] = SmartSieve::getServerValue($credentials['server'], 'imapport', '143');
        $server['maildomain'] = SmartSieve::getServerValue($credentials['server'], 'maildomain');
        $server['use_starttls'] = SmartSieve::getServerValue($credentials['server'], 'use_starttls', true);
        $smartsieve['server'] = $server;

        $smartsieve['auth'] = $credentials['auth'];
        $auth_domain = SmartSieve::getServerValue($credentials['server'], 'auth_domain');
        if (!empty($auth_domain) && strpos($credentials['auth'], '@') === false) {
            $smartsieve['auth'] .= '@' . $auth_domain;
        }
        $smartsieve['authz'] = $credentials['authz'];
        if ($credentials['authz'] == '') {
            $smartsieve['authz'] = $credentials['auth'];
        }
        if (!empty($auth_domain) && strpos($credentials['authz'], '@') === false) {
            $smartsieve['authz'] .= '@' . $auth_domain;
        }
        require_once SmartSieve::getConf('lib_dir', 'lib') . '/Crypt.php';
        $smartsieve['passwd'] = Crypto::encrypt($credentials['passwd']);
        $_SESSION['smartsieve'] = $smartsieve;
        return true;
    }

   /**
    * Login to the managesieve server.
    *
    * @return mixed true on success, string error if not
    */
    function authenticate()
    {
        if (!isset($_SESSION['smartsieve']) || !is_array($_SESSION['smartsieve'])) {
            return 'authenticate: no session started';
        }
        $smartsieve = $_SESSION['smartsieve'];

        require_once SmartSieve::getConf('lib_dir', 'lib') . '/Crypt.php';
        $passwd = Crypto::decrypt($smartsieve['passwd']);

        $managesieve = new Managesieve();
        $ret = $managesieve->open($smartsieve['server']['host'], $smartsieve['server']['sieveport']);
        if ($ret !== true) {
            $err = $managesieve->getError();
            $managesieve->close();
            return $err;
        }
        if (in_array('starttls', $managesieve->_capabilities) &&
            function_exists('stream_socket_enable_crypto') &&
            $smartsieve['server']['use_starttls'] !== false) {
            $ret = $managesieve->starttls();
            if ($ret !== true) {
                $err = $managesieve->getError();
                $managesieve->close();
                return $err;
            }
        }
        $ret = $managesieve->authenticate($smartsieve['auth'], $passwd, $smartsieve['authz'], SmartSieve::getConf('sasl_mech'));
        if ($ret !== true) {
            $err = $managesieve->getError();
            $managesieve->close();
            return $err;
        }
        $GLOBALS['managesieve'] = $managesieve;
        register_shutdown_function(array('SmartSieve', 'close'));
        return true;
    }

   /**
    * Close the managesieve connection and destroy the managesieve object.
    *
    * @return boolean true
    */
    function close()
    {
        if (isset($GLOBALS['managesieve']) && is_object($GLOBALS['managesieve'])) {
            $GLOBALS['managesieve']->close();
            $GLOBALS['managesieve'] = null;
            unset($GLOBALS['managesieve']);
        }
        return true;
    }

   /**
    * Translate text into the language being used during this session.
    *
    * This function takes a string and translates it into the language 
    * being used during this session. The string and args parameters 
    * should be in the same format as expected by vsprintf().
    *
    * @var string $string The text to translate
    * @var array $args vsprintf style arguments
    * @return string The (possibly translated) text
    */
    function text($string = '', $args = array())
    {
        static $lang, $phrase;

        if (!isset($lang)) {
            $lang = SmartSieve::getLang();
        }

        if (!isset($phrase)) {
            @include SmartSieve::getConf('lang_dir', 'conf/locale') . "/$lang/strings.php";
        }

        if (!empty($phrase[$string])) {
            $string = $phrase[$string];
        }
        return vsprintf($string, $args);
    }

   /*
    * Return the charset to use to display each page. Different 
    * languages might use different charsets.
    *
    * @return string The charset to use
    */
    function getCharset()
    {
        static $charset;

        if (!isset($charset)) {
            $lang = SmartSieve::getLang();
            include SmartSieve::getConf('config_dir') . '/locales.php';
            if (isset($locales[$lang]['charset'])) {
                $charset = $locales[$lang]['charset'];
            } else {
                $charset = SmartSieve::getConf('charset', 'ISO-8859-1');
            }
        }
        return $charset;
    }

   /**
    * Return the language to use for this SmartSieve session.
    *
    * @return string The language to use
    */
    function getLang()
    {
        // Get lang if login form submitted.
        if (isset($_POST['lang'])) {
            return SmartSieve::getPOST('lang');
        }
        // Check if user has changed language on login page.
        if (isset($_GET['login_lang'])) {
            return SmartSieve::getGET('login_lang');
        }
        // Check if language is set in the session.
        if (isset($_SESSION['smartsieve_lang'])) {
            return $_SESSION['smartsieve_lang'];
        }
        // If none of the above, use the default.
        return SmartSieve::getConf('language', 'en_GB');
    }

   /**
    * Convert a modified UTF-7 encoded mailbox name (RFC-2060) into the 
    * charset for the current language.
    *
    * @param string $string The mUTF-7 string to decode
    * @return string The string decoded into the current charset
    */
    function mutf7Decode($string)
    {
        $charset = SmartSieve::getCharset();

        /* if we're using the ISO-8859-1 charset, we can just use imap_utf7_decode(). */
        if (strtolower($charset) == 'iso-8859-1' || strtolower($charset) == 'us-ascii') {
            if (extension_loaded('imap')) {
                return imap_utf7_decode($string);
            }
        }

        /* try mbstring if available. */
        if (extension_loaded('mbstring')) {
            $decoded = @mb_convert_encoding($string, $charset, 'UTF7-IMAP');
            if ($decoded) {
                return $decoded;
            }
        }

        /* try iconv if available. use transliterations to avoid warnings about 
         * incompatible characters. also, add extra ascii char to avoid iconv bug. */
        if (extension_loaded('iconv')) {
            /* convert the modified UTF-7 string to UTF-7. */
            $utf7 = SmartSieve::modifiedToPlainUTF7($string);
            $decoded = @iconv('UTF-7', $charset . '//TRANSLIT', $utf7 . "\0");
            if ($decoded) {
                return $decoded;
            }
        }

        /* if all else fails, use imap_utf7_decode(). If mailbox name includes 
         * non-ISO-8859-1 characters, they will not be decoded correctly. */
        if (extension_loaded('imap')) {
            return imap_utf7_decode($string);
        }

        return $string;
    }

   /**
    * Convert a modified UTF-7 encoded string to unmodified UTF-7.
    * See: RFC-2060.
    *
    * @param string $string The mUTF-7 string to convert
    * @return string The converted UTF-7 string
    */
    function modifiedToPlainUTF7($string)
    {
        $utf7 = '';
        $base64 = false;
        for ($i = 0; $i < strlen($string); $i++) {
            if ($string[$i] == "&") {
                /* Convert the shift char '&' to '+'.
                   Literal '&' will be encoded as '&-'. */
                if ($string[$i+1] == "-") {
                    $utf7 .= "&"; // '&-' -> '&'
                    $i++;
                }
                else {
                    $utf7 .= "+"; // '&' -> '+'
                    $base64 = true;
                }
            }
            elseif ($string[$i] == "-" && $base64) {
                /* shift back to us-ascii. */
                $base64 = false;
            }
            else {
                if ($base64 && $string[$i] == ",") {
                    $utf7 .= "/"; // ',' -> '/'
                }
                elseif (!$base64 && $string[$i] == "+") {
                    $utf7 .= "+-"; // '+' -> '+-'
                }
                else {
                    $utf7 .= $string[$i];
                }
            }
        }
        return $utf7;
    }

   /**
    * Get the value of a config option. Returns the value of the setting 
    * or null if not set, thereby avoiding Undefined variable warnings.
    *
    * @param string $option Config option to get
    * @param string $def Default value
    * @return mixed Config value, possibly null
    */
    function getConf($option, $def=null)
    {
        require_once "conf/config.php";
        global $default;
        if (isset($default->$option)) {
            return $default->$option;
        }
        return $def;
    }

   /**
    * Get a value for a server set in servers.php
    *
    * @param string $skey Servers array index
    * @param string $val Server value
    * @param string $def Default value
    * @return mixed Server value, possibly null
    */
    function getServerValue($skey, $val, $def=null)
    {
        require_once "conf/servers.php";
        global $servers;
        if (isset($servers[$skey]) && isset($servers[$skey][$val])) {
            return $servers[$skey][$val];
        }
        return $def;
    }

   /**
    * Write a message to the log.
    *
    * @param string $msg The message to log
    * @param integer $level One of the LOG_* contants
    * @return boolean True on success, false if not
    */
    function log($msg, $level=LOG_INFO)
    {
        if (SmartSieve::getConf('logging') !== true) {
            return true;
        } if ($level > SmartSieve::getConf('logging_level', LOG_INFO)) {
            return true;
        }
        include_once 'Log.php';
        $log = &Log::singleton(SmartSieve::getConf('logging_method', 'syslog'),
                               SmartSieve::getConf('logging_facility', 'LOG_LOCAL4'),
                               SmartSieve::getConf('logging_ident', 'smartsieve'),
                               SmartSieve::getConf('logging_args'));
        if ($log === null) {
            SmartSieve::setError(SmartSieve::text('Failed writing to log'));
            return false;
        }
        return $log->log($msg, $level);
    }

   /**
    * Set an error notice message. If called without the msg parameter 
    * this will return the current set of error messages.
    *
    * @param string $msg The error message to set
    * @return mixed boolean true or array of string messages
    */
    function setError($msg=null)
    {
        if (!isset($_SESSION['errors']) || !is_array($_SESSION['errors'])) {
            $_SESSION['errors'] = array();
        }
        if ($msg === null) {
            $errors = $_SESSION['errors'];
            unset($_SESSION['errors']);
            return $errors;
        }
        $_SESSION['errors'][] = $msg;
        return true;
    }

   /**
    * Set a notice message. If called without the msg parameter
    * this will return the current set of notices.
    *
    * @param string $msg The message to set
    * @return mixed boolean true or array of string messages
    */
    function setNotice($msg=null)
    {
        if (!isset($_SESSION['notices']) || !is_array($_SESSION['notices'])) {
            $_SESSION['notices'] = array();
        }
        if ($msg === null) {
            $notices = $_SESSION['notices'];
            unset($_SESSION['notices']);
            return $notices;
        }
        $_SESSION['notices'][] = $msg;
        return true;
    }

   /**
    * Get the list of Sieve scripts on the server for the current user.
    *
    * @return mixed array of scripts if success, or string error if not
    */
    function getScriptList()
    {
        if (!isset($GLOBALS['managesieve']) || !is_object($GLOBALS['managesieve'])) {
            $ret = SmartSieve::authenticate();
            if ($ret !== true) {
                return $ret;
            }
        }
        global $managesieve;
        $slist = $managesieve->listScripts();
        if ($slist === false) {
            $resp = $managesieve->getLastResponse();
            if ($resp['state'] === F_BYE) {
                SmartSieve::handleReferral();
                return Smartsieve::getScriptList();
            }
            return $managesieve->getError();
        }
        return $slist;
    }

   /**
    * Get the name of the active script.
    *
    * @return mixed string name of active script, or null if none active
    */
    function getActiveScript()
    {
        $slist = SmartSieve::getScriptList();
        if (!is_array($slist)) {
            return "getActiveScript: $slist";
        }
        return array_search(true, $slist, true);
    }

   /**
    * Check if script exists on the server.
    *
    * @param string $name Name of script
    * @return boolean true if script exists on server, false if not
    */
    function scriptExists($name)
    {
        $slist = array_keys(SmartSieve::getScriptList());
        return in_array($name, $slist, true);
    }

   /**
    * Handle managesieve referrals.
    *
    * @return boolean true on success, or void redirect if not
    */
    function handleReferral()
    {
        global $managesieve;
        $resp = $managesieve->getLastResponse();
        if ($resp['state'] === F_BYE && $resp['code'] === RC_REFERRAL) {
            $rserver = $resp['code_args'];
            // With Cyrus 2.2.x the host value will look like "sieve://host".
            if (substr($rserver, 0, 8) == 'sieve://') {
                $rserver = substr($rserver, 8);
            }
            $managesieve->close();
            $ret = $managesieve->open($rserver, $_SESSION['smartsieve']['server']['sieveport']);
            if ($ret === true) {
                require_once SmartSieve::getConf('lib_dir', 'lib') . '/Crypt.php';
                $passwd = Crypto::decrypt($_SESSION['smartsieve']['passwd']);
                $ret = $managesieve->authenticate($_SESSION['smartsieve']['auth'], $passwd, 
                    $_SESSION['smartsieve']['authz'], SmartSieve::getConf('sasl_mech'));
                if ($ret === true) {
                    SmartSieve::setNotice(SmartSieve::text('Referred to server "%s"', $rserver));
                    $_SESSION['smartsieve']['server']['host'] = $rserver;
                    return true;
                }
            }
            SmartSieve::log(sprintf('handleReferral: %s', $managesieve->getError()), LOG_ERR);
            SmartSieve::close();
            header('Location: ' . SmartSieve::setUrl('login.php?reason=failure'),true);
            exit;
        }
        return true;
    }

   /**
    * Set the script to edit. Select a script and set the script object for it. 
    * If allow_multi_scripts if false this will always set the default script. 
    * Otherwise, if passed the script parameter this will set that as the working 
    * script. If not, it will set the currently active script or the first from the 
    * current script list, or the default script name if none exist on the server.
    *
    * @param string $script The script to edit
    * @return void
    */
    function setWorkingScript($script=null)
    {
        // If not allowing multiple scripts select the default.
        if (SmartSieve::getConf('allow_multi_scripts') === false) {
            $script = SmartSieve::getConf('scriptfile', 'smartsieve');
        }

        if (empty($script)) {
            $slist = SmartSieve::getScriptList();
            if (is_array($slist)) {
                $active = array_search(true, $slist, true);
                $slist = array_keys($slist);
                // If a script is active, select that.
                if ($active !== null && $active !== false) {
                    $script = $active;
                } elseif (count($slist) > 0) {
                    // Select the first from the list.
                    $script = $slist[0];
                }
            } else {
                SmartSieve::setError(SmartSieve::text('Failed reading script list: %s', $slist));
                SmartSieve::log("setWorkingScript: failed reading script list: $slist", LOG_ERR);
            }
        }
        // If all else fails, select the default.
        if (empty($script)) {
            $script = SmartSieve::getConf('scriptfile', 'smartsieve');
        }
        $_SESSION['smartsieve']['workingScript'] = $script;

        // Set the script object if not already set.
        if (!isset($_SESSION['scripts'][$script]) || !is_object($_SESSION['scripts'][$script])) {
            $_SESSION['scripts'][$script] = new Script($script);
        }
        $s = &$_SESSION['scripts'][$script];
        $ret = $s->getContent();
        if ($ret === false) {
            SmartSieve::setError(SmartSieve::text('ERROR: ') . $s->errstr);
            $logmsg = sprintf('failed reading rules from script "%s" for %s: %s',
                $s->name, $_SESSION['smartsieve']['authz'], $s->errstr);
            SmartSieve::log($logmsg, LOG_ERR);
        }
    }

   /**
    * Get the list of mailboxes for the current user.
    *
    * @return mixed An array of mUTF7 encoded mailbox names, or string error on failure
    */
    function getMailboxList()
    {
        require_once SmartSieve::getConf('lib_dir', 'lib') . '/Crypt.php';

        $connstr = sprintf('{%s:%s}INBOX', $_SESSION['smartsieve']['server']['host'], $_SESSION['smartsieve']['server']['imapport']);
        // get encrypted passwd.
        $passwd = Crypto::decrypt($_SESSION['smartsieve']['passwd']);
        $conn = imap_open($connstr, $_SESSION['smartsieve']['auth'], $passwd, OP_HALFOPEN);
        if (!$conn){
            return 'getMailboxList: imap_open failed: ' . imap_last_error();
        }

        $mboxlist = array();
        $mboxes = array();
        $connstr = sprintf('{%s:%s}', $_SESSION['smartsieve']['server']['host'],
            $_SESSION['smartsieve']['server']['imapport']);
        $mboxes = imap_listmailbox($conn,$connstr,"*");

        if (!is_array($mboxes) || count($mboxes) == 0) {
            return 'getMailboxList: imap_listmailbox failed: ' . imap_last_error();
        }

        foreach ($mboxes as $mbox) {
            $label = str_replace($connstr, '', $mbox);
            $mboxlist[] = $label;
        }

        imap_close($conn);
        return $mboxlist;
    }

   /**
    * Return a formatted url. Prepend the webroot if requested.
    * Set the session id as a parameter if the browser is not 
    * accepting cookies.
    *
    * @param string $uri Resourse to format
    * @param boolean $prependRoot Prepend the webroot
    * @return string The formatted url
    */
    function setUrl($uri, $prependRoot=true)
    {
        $url = '';
        if ($prependRoot) {
            $baseurl = SmartSieve::getConf('baseurl', '');
            if (substr($baseurl, -1) != '/') {
                $baseurl .= '/';
            }
            $url = $baseurl . $uri;
        }
        if (!isset($_COOKIE[session_name()])) {
            // Add session_id as url parameter.
            if (strstr($url, '?') === false) {
                $url .= '?';
            } else {
                $url .= '&';
            }
            $url .= urlencode(session_name()) . '=' . session_id();
        }
        return $url;
    }

   /**
    * If magic_quotes_gpc is enabled, remove backslashes.
    *
    * @param string $var Value to remove magic quotes from
    * @return string Value stripped of any magic quotes
    */
    function removeMagicQuotes($var)
    {
        static $magicQuotes;
        if (!isset($magicQuotes)) {
            $magicQuotes = get_magic_quotes_gpc();
        }
        if ($magicQuotes == true) {
            if (is_array($var)) {
                $new = array();
                foreach ($var as $key=>$val) {
                    $new[$key] = SmartSieve::removeMagicQuotes($val);
                }
                return $new;
            }
            return stripslashes($var);
        }
        return $var;
    }

   /**
    * Get a value from the GET string. Remove magic quotes if necessary.
    *
    * @param string $var Value to get
    * @param mixed $def Default to return if value not found
    * @return mixed Value if set, or default if not (possibly null)
    */
    function getGET($var, $def=null)
    {
        return (isset($_GET[$var])) ? SmartSieve::removeMagicQuotes($_GET[$var]) : $def;
    }

   /**
    * Get a value from the HTTP POST data. Remove magic quotes if necessary.
    *
    * @param string $var Value to get
    * @param mixed $def Default to return if value not found
    * @return mixed Value if set, or default if not (possibly null)
    */
    function getPOST($var, $def=null)
    {
        return (isset($_POST[$var])) ? SmartSieve::removeMagicQuotes($_POST[$var]) : $def;
    }

   /**
    * Get a POST or GET value.
    *
    * @param string $var Value to get
    * @param mixed $def Default to return if value not found
    * @return mixed Value if set, or default if not
    */
    function getFormValue($var, $def=null)
    {
        return (($val = SmartSieve::getPOST($var)) !== null) ? $val : 
            SmartSieve::getGET($var, $def);
    }

   /**
    * Convert a non-UTF-8 encoded string into UTF-8. We must assume the string is 
    * currently encoded in the charset used for the current language.
    *
    * @param string $string  The string to convert
    * @return string  UTF-8 encoded string
    */
    function utf8Encode($string)
    {
        $charset = SmartSieve::getCharset();

        if (strtolower($charset) == 'utf-8') {
            return $string;
        }

        /* Try iconv. */
        if (extension_loaded('iconv')) {
            $recoded = @iconv($charset, 'UTF-8', $string);
            if ($recoded) {
                return $recoded;
            }
        }

        /* Try mbstring. */
        if (extension_loaded('mbstring')) {
            $recoded = @mb_convert_encoding($string, 'UTF-8', $charset);
            if ($recoded) {
                return $recoded;
            }
        }

        /* If all else fails, use utf8_encode(). If $string contains 
         * non-ISO-8859-1 characters, they will not be encoded correctly. */
        return utf8_encode($string);
    }

   /**
    * Convert a UTF-8 encoded string into the charset of the current language. 
    *
    * @param string $string  The UTF-8 string to convert
    * @return string  The decoded string
    */
    function utf8Decode($string)
    {
        $charset = SmartSieve::getCharset();

        if (strtolower($charset) == 'utf-8') {
            return $string;
        }

        /* Try iconv. */
        if (extension_loaded('iconv')) {
            $recoded = @iconv('UTF-8', $charset . '//TRANSLIT', $string);
            if ($recoded) {
                return $recoded;
            }
        }

        /* Try mbstring. */
        if (extension_loaded('mbstring')) {
            $recoded = @mb_convert_encoding($string, $charset, 'UTF-8');
            if ($recoded) {
                return $recoded;
            }
        }

        /* If all else fails, use utf8_decode(). If $string contains
         * non-ISO-8859-1 characters, they will not be decoded correctly. */
        return utf8_decode($string);
    }

}

/* end class SmartSieve. */

?>
